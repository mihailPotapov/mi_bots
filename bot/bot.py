import telebot
import random
import masiv_filtr
from telebot import types
from data_manager import TOKEN, UserDatabase

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
BACK_BUTTON = "‚óÄ –Ω–∞–∑–∞–¥"
WELCOME_MESSAGE = (
    "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {0.first_name}!\n"
    "–Ø - <b>{1.first_name}</b>, –±–æ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã–π, —á—Ç–æ–±—ã –±—ã—Ç—å –ø–æ–¥–æ–ø—ã—Ç–Ω—ã–º –∫—Ä–æ–ª–∏–∫–æ–º."
)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
bot = telebot.TeleBot(TOKEN)
db = UserDatabase('userdatabase.db')

@bot.message_handler(commands=['start'])
def welcome(message):
    hi = open('image/Hi.webp', 'rb')
    bot.send_sticker(message.chat.id, hi)

    user_id = message.from_user.id

    if not db.is_user_exists(user_id):
        db.add_new_user(user_id)

    bot.send_message(message.chat.id, WELCOME_MESSAGE.format(message.from_user, bot.get_me()), parse_mode='html', reply_markup=start_menu())

@bot.message_handler(content_types=['text'])
def main(message):
    chat_id = message.chat.id
    text = message.text.lower()
    user_id = message.from_user.id

    if message.chat.type == 'private':
        if text == 'üé≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ':
            perform_purchase(chat_id, user_id, 10, lambda: bot.send_message(chat_id, f"–í—ã–ø–∞–ª–æ —á–∏—Å–ª–æ: {str(random.randint(0, 100))}"))

        elif text == 'ü§ë –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥':
            current_balance = db.get_user_balance(user_id)
            new_balance = current_balance + 1
            db.update_user_balance(user_id, new_balance)
            bot.send_message(chat_id, f"üí∞ –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ 1 –º–æ–Ω–µ—Ç—É.\nüíµ –ë–∞–ª–∞–Ω—Å: {new_balance}")
        
        elif text == 'üíº –º–æ–π –±–∞–ª–∞–Ω—Å':
            current_balance = db.get_user_balance(user_id)
            bot.send_message(chat_id, f"üíµ –ë–∞–ª–∞–Ω—Å: {current_balance}")

        elif text == 'üòä –∫–∞–∫ –¥–µ–ª–∞?':
            markup = types.InlineKeyboardMarkup(row_width=2)
            item1 = types.InlineKeyboardButton("—Ö–æ—Ä–æ—à–æ", callback_data='good')
            item2 = types.InlineKeyboardButton("–Ω–µ –æ—á–µ–Ω—å", callback_data='bad')
            markup.add(item1, item2)
            bot.send_message(chat_id, '–û—Ç–ª–∏—á–Ω–æ, —Å–∞–º –∫–∞–∫? üòä', reply_markup=markup)

        elif text == 'üñº –º–µ–¥–∏—è':
            media_menu(chat_id)
            
        elif text == 'üóÉ —Ä–∞–∑–Ω–æ–µ':
            diverse_menu(chat_id)

        elif text == '—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ?':
            bot.send_message(chat_id, '–Ø - –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —É—Å–ª—É–≥. ')
       
        elif text == '—Ö–æ—á—É –æ–±–æ–∏':
            wallpapers_menu(chat_id)

        elif text == '—Ö–æ—á—É –∫—Ä—É—Ç—ã–µ –æ–±–æ–∏ üòé':
            perform_purchase(chat_id, user_id, 21, lambda: send_random_image(chat_id, masiv_filtr.oboi_gryt))

        elif text == '–∞–Ω–∏–º–µ':
            perform_purchase(chat_id, user_id, 22, lambda: send_random_image(chat_id, masiv_filtr.oboi_anime))

        elif text == '–ø—Ä–∏–≤–µ—Ç':
            bot.send_message(chat_id, '–ü—Ä–∏–≤–µ—Ç! üëã')
            bot.send_sticker(chat_id, sticker=open("gif/AnimatedSticker.tgs", 'rb'))

        elif text in masiv_filtr.otvet:
            bot.send_photo(chat_id, photo=open("image/ric.jpg", 'rb'))

        elif text in masiv_filtr.mat:
            bot.send_message(chat_id, '–°–∞–º –∏–¥–∏ –Ω–∞ —Ö—É–π! üò°')
            bot.send_sticker(chat_id, sticker=open("gif/Sticker.tgs", 'rb'))

        elif text == '—Å–∫–∏–Ω—å –≥–∏—Ñ–∫—É':
            perform_purchase(chat_id, user_id, 30, lambda: (
                bot.send_message(chat_id, '–î–µ—Ä–∂–∏ –≥–∏—Ñ–∫—É! üòé'),
                bot.send_document(chat_id, document=open(random.choice(masiv_filtr.gif), 'rb'))
            ))
                        
        elif text == BACK_BUTTON:
            bot.send_message(chat_id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_menu())

        elif text in masiv_filtr.Vi:
            diverse_menu(chat_id)

        else:
            bot.send_message(chat_id, '–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —Ç–µ–±—è. üòï')

def start_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üóÉ —Ä–∞–∑–Ω–æ–µ")
    item2 = types.KeyboardButton("üñº –º–µ–¥–∏—è")
    markup.add(item1, item2)
    return markup

def media_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("—Ö–æ—á—É –æ–±–æ–∏")
    item2 = types.KeyboardButton("—Å–∫–∏–Ω—å –≥–∏—Ñ–∫—É")
    item3 = types.KeyboardButton(BACK_BUTTON)
    markup.add(item1, item2, item3)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏–∞:", reply_markup=markup)

def diverse_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("üé≤ —Ä–∞–Ω–¥–æ–º–Ω–æ–µ —á–∏—Å–ª–æ")
    item2 = types.KeyboardButton("üòä –∫–∞–∫ –¥–µ–ª–∞?")
    item3 = types.KeyboardButton("—Ä–∞—Å—Å–∫–∞–∂–∏ –æ —Å–µ–±–µ?")
    item4 = types.KeyboardButton("ü§ë –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –¥–µ–Ω–µ–≥")
    item5 = types.KeyboardButton("üíº –º–æ–π –±–∞–ª–∞–Ω—Å")
    item6 = types.KeyboardButton(BACK_BUTTON)
    markup.add(item1, item2, item3, item4, item5, item6)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:", reply_markup=markup)

def wallpapers_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("—Ö–æ—á—É –∫—Ä—É—Ç—ã–µ –æ–±–æ–∏ üòé")
    item2 = types.KeyboardButton("–∞–Ω–∏–º–µ")
    item3 = types.KeyboardButton(BACK_BUTTON)
    markup.add(item1, item2, item3)
    bot.send_message(chat_id, '–ê–Ω–∏–º–µ –∏–ª–∏ –∫—Ä—É—Ç—ã–µ –æ–±–æ–∏? üòé', reply_markup=markup)

def send_random_image(chat_id, image_list):
    if image_list:
        bot.send_message(chat_id, '–î–µ—Ä–∂–∏! üòé')
        img_path = random.choice(image_list)
        bot.send_photo(chat_id, photo=open(img_path, 'rb'))

def perform_purchase(chat_id, user_id, item_price, item_action):
    current_balance = db.get_user_balance(user_id)
    
    if current_balance < item_price:
        needed_coins = item_price - current_balance
        message = f"–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —ç—Ç–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏. –í–∞–º –Ω—É–∂–Ω–æ {needed_coins} –º–æ–Ω–µ—Ç."
        bot.send_message(chat_id, message)
    else:
        new_balance = current_balance - item_price
        db.update_user_balance(user_id, new_balance)
        bot.send_message(chat_id, f"üíµ –ë–∞–ª–∞–Ω—Å: {new_balance}")
        item_action()

@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    try:
        if call.message:
            if call.data == 'good':
                bot.send_message(call.message.chat.id, '–í–æ—Ç –∏ –æ—Ç–ª–∏—á–Ω–µ–Ω—å–∫–æ! üòä')
            elif call.data == 'bad':
                bot.send_message(call.message.chat.id, '–ë—ã–≤–∞–µ—Ç. üò¢')

            bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–ö–∞–∫ –¥–µ–ª–∞? üòä", reply_markup=None)
    except Exception as e:
        print(repr(e))

if __name__ == "__main__":
    print('–ó–∞–ø—É—â–µ–Ω...')
    bot.polling(none_stop=True)
