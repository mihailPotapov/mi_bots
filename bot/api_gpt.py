import telebot
import os
import random
from telebot import types
from openai import OpenAI
from cryptography.fernet import Fernet
from dotenv import load_dotenv
from data_manager import TOKEN
from db_utils import (
    user_exists,
    add_user_to_db,
    get_current_role,
    update_chat_role,
    get_db_connection,
    get_role_name,
    update_user_tokens,
    get_user_tokens,
    get_user_id_somehow,
)
# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –∫–Ω–æ–ø–∫–∞
BACK_BUTTON = "‚óÄ –Ω–∞–∑–∞–¥"
history_phrases = [
    "—Ä–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é",
    "—Ä–∞—Å—Å–∫–∞–∂–∏ –∑–∞–±–∞–≤–Ω—ã–π —Å–ª—É—á–∞–π —É —Ç–µ–±—è"
]

load_dotenv()
# –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å–æ–¥–µ—Ä–∂–∞—â–∏–µ —Ç–µ–∫—Å—Ç –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è
WELCOME_MESSAGE = (
    "–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'gpt_chatü§ñ'\n"
    "–ß—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '—Å—Ç–æ–ø‚õî'\n"
    "–ß—Ç–æ –±—ã –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gpt\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô'\n"
    "–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏-–∫–æ–º–∞–Ω–¥—ã\n"
    "–ß—Ç–æ –±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –Ω–∞–∂–º–∏—Ç–µ '—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠'\n"
    "–ß—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –Ω–∞–∂–º–∏—Ç–µ '—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠'"
)
# –ß—Ç–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞ –∏–∑ .env
encrypted_api_key = os.getenv("ENCRYPTED_API_KEY")
# –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
if not encrypted_api_key:
    raise Exception("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")

# –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
with open("secret.key", "rb") as key_file:
    key = key_file.read()

# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ API –∫–ª—é—á–∞
fernet = Fernet(key)
decrypted = fernet.decrypt(encrypted_api_key.encode())
api_key1 = decrypted.decode()

bot = telebot.TeleBot(TOKEN)
client = OpenAI(api_key=api_key1)
active_chats = {}


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def welcome(message):
    hi = open('image/Hi.webp', 'rb')
    user = message.from_user
    if user_exists(user.username):
        bot.send_sticker(message.chat.id, hi)
        bot.send_message(message.chat.id, "–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!", reply_markup=start_menu())
        bot.send_message(message.chat.id, WELCOME_MESSAGE)
    else:
        bot.send_sticker(message.chat.id, hi)
        add_user_to_db(user.first_name, user.username, message.chat.id)
        bot.send_message(message.chat.id, "–†–∞–¥ –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –ª–∏—Ü–æ!", reply_markup=start_menu())
        bot.send_message(message.chat.id, WELCOME_MESSAGE)
        print("–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user.first_name, user.username, message.chat.id)


@bot.message_handler(commands=['gpt_chat'])
def enable_gpt_chat(message):
    chat_id = message.chat.id
    user_id = get_user_id_somehow(message.chat.id)
    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users

    conn = get_db_connection()
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ tokens
    cursor.execute("SELECT id_user FROM tokens WHERE id_user = %s", (user_id,))
    if not cursor.fetchone():
        # –ï—Å–ª–∏ –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –Ω–∞—á–∞–ª—å–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–∫–µ–Ω–æ–≤
        cursor.execute("INSERT INTO tokens (id_user, token) VALUES (%s, 10000)", (user_id,))
        conn.commit()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–ø–∏—Å—å –≤ chat_roles –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
    cursor.execute("SELECT id_chat FROM chat_roles WHERE id_chat = %s", (chat_id,))
    if not cursor.fetchone():
        # –ï—Å–ª–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å –Ω–∞—á–∞–ª—å–Ω–æ–π —Ä–æ–ª—å—é
        cursor.execute("INSERT INTO chat_roles (id_chat, id_roles) VALUES (%s, %s)", (chat_id, 1))
        conn.commit()

    cursor.close()
    conn.close()

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç–∞
    active_chats[chat_id] = True
    bot.send_message(chat_id, "–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω.")
    bot.send_message(chat_id, "–ú–µ–Ω—é GPT:", reply_markup=gpt_menu())


@bot.message_handler(commands=['stop'])
def disable_gpt_stop_chat(message):
    active_chats.pop(message.chat.id, None)
    bot.send_message(message.chat.id, "–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω.")
    bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_menu())


@bot.message_handler(commands=['settings'])
def disable_gpt_settings_chat(message):
    active_chats.pop(message.chat.id, None)
    bot.send_message(message.chat.id, "–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    bot.send_message(message.chat.id, "–ú–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gpt:", reply_markup=menu_settings())


@bot.message_handler(commands=['gpt_roles'])
def list_roles(message):
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("SELECT id_roles, name_roles FROM roles")
    roles = cursor.fetchall()
    cursor.close()
    conn.close()

    markup_roles = types.InlineKeyboardMarkup()
    for role in roles:
        button = types.InlineKeyboardButton(role[1], callback_data=f"setrole_{role[0]}")
        markup_roles.add(button)

    bot.send_message(message.chat.id, "–í–æ—Ç —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:", reply_markup=markup_roles)


@bot.message_handler(commands=['current_role'])
def current_role(message):
    chat_id = message.chat.id
    conn = get_db_connection()
    cursor = conn.cursor()

    try:
        # –ó–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π —Ä–æ–ª–∏ –¥–ª—è —á–∞—Ç–∞
        cursor.execute(
            "SELECT r.name_roles FROM chat_roles cr "
            "JOIN roles r ON cr.id_roles = r.id_roles "
            "WHERE cr.id_chat = %s", (chat_id,))
        role = cursor.fetchone()

        # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –ø–µ—á–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∑–∞–ø—Ä–æ—Å–∞
        # print(f"–†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è —á–∞—Ç–∞ {chat_id}: {role}")

        if role:
            bot.send_message(chat_id, f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {role[0]}")
        else:
            bot.send_message(chat_id, "–†–æ–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
    except Exception as e:
        print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")
    finally:
        cursor.close()
        conn.close()


# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
@bot.callback_query_handler(func=lambda call: True)
def callback_inline(call):
    if call.message:
        if call.data.startswith('setrole_'):
            role_id = int(call.data.split('_')[1])
            chat_id = call.message.chat.id

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –ë–î
            update_chat_role(chat_id, role_id)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
            role_name = get_role_name(role_id)

            bot.answer_callback_query(call.id, f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{role_name}'.")
            # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            bot.delete_message(chat_id, call.message.message_id)

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            bot.send_message(chat_id, f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{role_name}'.")


def clear_the_history(message):
    chat_id = message.chat.id

    # –ü–æ–ª—É—á–∞–µ–º id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    user_id = get_user_id_somehow(chat_id)
    if user_id is None:
        bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return  # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute("UPDATE tokens SET token = 10000 WHERE id_user = %s", (user_id,))
    conn.commit()
    cursor.close()
    conn.close()

    bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 10000.")


@bot.message_handler(func=lambda message: True)
def gpt(message):
    chat_id = message.chat.id
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∂–∏–º–∞ GPT
    if 'gpt_chatü§ñ' in message.text.lower():
        enable_gpt_chat(message)
    elif '—Å—Ç–æ–ø‚õî' in message.text.lower():
        disable_gpt_stop_chat(message)
    elif '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô' in message.text.lower():
        disable_gpt_settings_chat(message)
    elif '—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠' in message.text.lower():
        list_roles(message)
    elif '—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠' in message.text.lower():
        current_role(message)
    elif '–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' in message.text.lower():
        clear_the_history(message)
    elif BACK_BUTTON in message.text.lower():
        bot.send_message(message.chat.id, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_menu())
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ GPT, –µ—Å–ª–∏ —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
    elif chat_id in active_chats:
        current_tokens = get_user_tokens(chat_id)
        print(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {current_tokens}")  # –í—ã–≤–æ–¥ –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
        msg2 = bot.send_message(chat_id, f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {current_tokens}")

        if current_tokens <= 0:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.")
            return

        prompt = message.text if '–∏—Å—Ç–æ—Ä–∏—è' not in message.text.lower() else random.choice(history_phrases)
        msg = bot.send_message(chat_id, '–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞..')

        role = get_current_role(chat_id)
        system_message = f"–¢—ã {role}" if role else "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫"
        response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ]
        )

        tokens_used = response.usage.total_tokens
        print(f"–¢–æ–∫–µ–Ω–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {tokens_used}")
        if current_tokens < tokens_used:
            bot.send_message(chat_id, "–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.")
            return

        gpt_text = response.choices[0].message.content
        bot.delete_message(chat_id, msg.message_id)
        bot.delete_message(chat_id, msg2.message_id)
        bot.send_message(chat_id, gpt_text)
        bot.send_message(chat_id, f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens_used}")

        update_user_tokens(chat_id, tokens_used)
        new_token_balance = current_tokens - tokens_used
        bot.send_message(chat_id, f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {new_token_balance}")
        print('\n–í–æ–ø—Ä–æ—Å:', prompt)
        print('\n–û—Ç–≤–µ—Ç:', gpt_text)
        print('–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤:', tokens_used)
    else:
        bot.reply_to(message, "—Ä–µ–∂–∏–º GPT –æ—Ç–∫–ª—é—á–µ–Ω")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
def start_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_chat_gpt = types.KeyboardButton("gpt_chatü§ñ")
    item1 = types.KeyboardButton("/start")
    item2 = types.KeyboardButton("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
    markup.add(item_chat_gpt, item1, item2)
    return markup


def gpt_menu():
    markup_gpt = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_chat_gpt = types.KeyboardButton("gpt_chatü§ñ")
    item1 = types.KeyboardButton("–∏—Å—Ç–æ—Ä–∏—è")
    item2 = types.KeyboardButton("—Å—Ç–æ–ø‚õî")
    item3 = types.KeyboardButton("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
    back_button = types.KeyboardButton(BACK_BUTTON)
    markup_gpt.add(item_chat_gpt, item1, item2, item3, back_button)
    return markup_gpt


def menu_settings():
    markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠")
    item2 = types.KeyboardButton("—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠")
    item3 = types.KeyboardButton("–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    back_button = types.KeyboardButton(BACK_BUTTON)
    markup_settings.add(item1, item2, item3, back_button)
    return markup_settings


if __name__ == "__main__":
    print('–ó–∞–ø—É—â–µ–Ω...')
    bot.infinity_polling(none_stop=True)
    print('–í—ã–∫–ª—é—á–µ–Ω...')