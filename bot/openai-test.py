from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from pathlib import Path
import os
import random
import openai
import asyncio
from cryptography.fernet import Fernet
from dotenv import load_dotenv
from data_manager import TOKEN
from db_utils2 import (
    user_exists,
    get_db_pool,
    update_user_tokens,
    add_user_to_db,
    get_current_role,
    update_chat_role,
    get_role_name,
    get_user_tokens,
    get_user_id_somehow,
)


BACK_BUTTON = "‚óÄ –Ω–∞–∑–∞–¥"

history_phrases = [
    "—Ä–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é",
    "—Ä–∞—Å—Å–∫–∞–∂–∏ –∑–∞–±–∞–≤–Ω—ã–π —Å–ª—É—á–∞–π —É —Ç–µ–±—è"
]

load_dotenv()

# –ß—Ç–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞ –∏–∑ .env
encrypted_api_key = os.getenv("ENCRYPTED_API_KEY")
WELCOME_MESSAGE = (
    "–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'gpt_chatü§ñ'\n"
    "–ß—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '—Å—Ç–æ–ø‚õî'\n"
    "–ß—Ç–æ –±—ã –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gpt\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô'\n"
    "–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏-–∫–æ–º–∞–Ω–¥—ã\n"
    "–ß—Ç–æ –±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –Ω–∞–∂–º–∏—Ç–µ '—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠'\n"
    "–ß—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –Ω–∞–∂–º–∏—Ç–µ '—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠'"
)

if not encrypted_api_key:
    raise Exception("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")

# –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
with open("secret.key", "rb") as key_file:
    key = key_file.read()

# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ API –∫–ª—é—á–∞
fernet = Fernet(key)
decrypted = fernet.decrypt(encrypted_api_key.encode())
api_key1 = decrypted.decode()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
client = openai.OpenAI(api_key=api_key1)
# —Ñ–ª–∞–≥–∏
active_chats = {}
user_flags = {}
# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ —Å–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∞—É–¥–∏–æ—Ñ–∞–π–ª–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
temp_audio_folder = Path("temp_audio")
temp_audio_folder.mkdir(exist_ok=True)


def start_menu() -> types.ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton('gpt_chatü§ñ'))
    markup.add(KeyboardButton('—Å—Ç–æ–ø‚õî'), KeyboardButton('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô'))
    markup.add(KeyboardButton('—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠'), KeyboardButton('—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠'))
    return markup


async def on_startup(dispatcher):
    global db_pool
    db_pool = await get_db_pool()
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.')


@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    with open('image/Hi.webp', 'rb') as hi:
        user = message.from_user
        if await user_exists(user.username, db_pool):
            await message.answer_photo(hi)
            await message.answer("–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!", reply_markup=start_menu())
            await message.answer(WELCOME_MESSAGE)
            print('–∑–∞—à–µ–ª —Å—Ç–∞—Ä—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å')
        else:
            await message.answer_photo(hi)
            await add_user_to_db(user.first_name, user.username, message.chat.id, db_pool)
            await message.answer("–†–∞–¥ –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –ª–∏—Ü–æ!", reply_markup=start_menu())
            await message.answer(WELCOME_MESSAGE)
            print("–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user.first_name, user.username, message.chat.id)


@dp.message_handler(commands=['gpt_chat'])
async def enable_gpt_chat(message: types.Message, db_pool):
    chat_id = message.chat.id
    user_id = await get_user_id_somehow(chat_id, db_pool)  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞
    if user_id is None:
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    async with db_pool.acquire() as conn:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ tokens –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
        row = await conn.fetchrow("SELECT id_user FROM tokens WHERE id_user = $1", user_id)
        if not row:
            await conn.execute("INSERT INTO tokens (id_user, token) VALUES ($1, $2)", user_id, 10000)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ chat_roles –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
        row = await conn.fetchrow("SELECT id_chat FROM chat_roles WHERE id_chat = $1", chat_id)
        if not row:
            await conn.execute("INSERT INTO chat_roles (id_chat, id_roles) VALUES ($1, $2)", chat_id, 1)

    active_chats[chat_id] = True
    await message.answer("–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω.")
    await message.answer("–ú–µ–Ω—é GPT:", reply_markup=gpt_menu())


@dp.message_handler(commands=['stop'])
async def disable_gpt_stop_chat(message: types.Message):
    active_chats.pop(message.chat.id, None)
    await message.answer("–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω.")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_menu())


@dp.message_handler(commands=['settings'])
async def disable_gpt_settings_chat(message: types.Message):
    active_chats.pop(message.chat.id, None)
    await message.answer("–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    await message.answer("–ú–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gpt:", reply_markup=menu_settings())


@dp.message_handler(commands=['gpt_roles'])
async def list_roles(message: types.Message, db_pool):
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ db_pool –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, –Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ —Ñ—É–Ω–∫—Ü–∏–∏ on_startup

    async with db_pool.acquire() as conn:  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
        # –í asyncpg –Ω–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫—É—Ä—Å–æ—Ä –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞
        roles = await conn.fetch("SELECT id_roles, name_roles FROM roles")

    markup_roles = InlineKeyboardMarkup()
    for role in roles:
        button = InlineKeyboardButton(role['name_roles'], callback_data=f"setrole_{role['id_roles']}")
        markup_roles.add(button)

    await message.answer("–í–æ—Ç —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:", reply_markup=markup_roles)


@dp.message_handler(commands=['current_role'])
async def current_role(message: types.Message, db_pool):
    chat_id = message.chat.id
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ get_db_pool() - —ç—Ç–æ –≤–∞—à–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—É–ª–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ db_pool –≥–ª–æ–±–∞–ª—å–Ω–æ –¥–æ—Å—Ç—É–ø–µ–Ω –∏ —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω

    async with db_pool.acquire() as conn:  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º conn.fetchrow() –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏—è –æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
            role = await conn.fetchrow(
                "SELECT r.name_roles FROM chat_roles cr "
                "JOIN roles r ON cr.id_roles = r.id_roles "
                "WHERE cr.id_chat = $1", chat_id)

            if role:
                await message.answer(f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {role['name_roles']}")
            else:
                await message.answer("–†–æ–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
        except Exception as e:
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å.")
            print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.callback_query_handler(lambda call: call.data.startswith('setrole_'))
async def callback_inline(call: types.CallbackQuery):
    try:
        role_id = int(call.data.split('_')[1])
        chat_id = call.message.chat.id
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –ë–î
        await update_chat_role(chat_id, role_id, db_pool)
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
        role_name = await get_role_name(role_id, db_pool)

        if role_name:
            await call.answer(f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{role_name}'.", show_alert=True)
            # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
            await call.message.delete()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            await call.message.answer(f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{role_name}'.")
        else:
            await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Ä–æ–ª–∏.", show_alert=True)
    except Exception as e:
        await call.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
        print(f"–û—à–∏–±–∫–∞: {e}")


@dp.message_handler(commands=['clear_the_history'])
async def clear_the_history(message: types.Message, db_pool):
    chat_id = message.chat.id
    try:
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç user_id –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ chat_id
        user_id = await get_user_id_somehow(chat_id, db_pool)  # –î–æ–±–∞–≤–ª–µ–Ω db_pool –∫–∞–∫ –∞—Ä–≥—É–º–µ–Ω—Ç, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if user_id is None:
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π db_pool –Ω–∞–ø—Ä—è–º—É—é
        async with db_pool.acquire() as conn:  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–∑ –ø—É–ª–∞
            async with conn.transaction():  # –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ —É –≤–∞—Å –µ—Å—Ç—å —Ç–∞–±–ª–∏—Ü–∞ tokens —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ id_user –∏ token
                await conn.execute("UPDATE tokens SET token = 10000 WHERE id_user = $1", user_id)

        await message.reply("–ò—Å—Ç–æ—Ä–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 10000.")
    except Exception as e:
        await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞.")
        print(f"–û—à–∏–±–∫–∞: {e}")


# –≥–æ–ª–æ—Å–æ–≤–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
openai_client = client


@dp.message_handler(commands=['speech'])
async def speech_to_voice(message: types.Message):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è, —É–±–∏—Ä–∞—è –∫–æ–º–∞–Ω–¥—É /speech
        text_to_speech = message.text[len('/speech '):].strip()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –Ω–µ –ø—É—Å—Ç–æ–π
        if not text_to_speech:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /speech.")
            return

        # –°–æ–∑–¥–∞–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = openai_client.audio.speech.create(
            model="tts-1",
            voice="nova",
            input=text_to_speech
        )

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –≤ –ø–∞–ø–∫–µ temp_audio
        speech_file_path = temp_audio_folder / f"{message.from_user.id}_{message.message_id}.mp3"

        # –í –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤–∞—à–µ–π –≤–µ—Ä—Å–∏–∏ SDK, –º–µ—Ç–æ–¥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –º–æ–∂–µ—Ç –æ—Ç–ª–∏—á–∞—Ç—å—Å—è
        with speech_file_path.open('wb') as file:
            file.write(
                response.content)  # –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å response.stream_to_file(speech_file_path), –µ—Å–ª–∏ —ç—Ç–æ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        with speech_file_path.open('rb') as audio:
            await message.reply_voice(voice=audio)

        # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
        speech_file_path.unlink()

    except Exception as e:
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –≥–ª–∞–≤–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
@dp.message_handler()
async def gpt(message: types.Message):
    chat_id = message.chat.id
    if 'gpt_chatü§ñ' in message.text.lower():
        await enable_gpt_chat(message, db_pool)
    elif '—Å—Ç–æ–ø‚õî' in message.text.lower():
        await disable_gpt_stop_chat(message)
    elif '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô' in message.text.lower():
        await disable_gpt_settings_chat(message)
    elif '—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠' in message.text.lower():
        await list_roles(message, db_pool)
    elif '—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠' in message.text.lower():
        await current_role(message, db_pool)
    elif '–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' in message.text.lower():
        await clear_the_history(message, db_pool)
    elif BACK_BUTTON in message.text.lower():
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_menu())
    elif chat_id in active_chats:
        current_tokens = await get_user_tokens(chat_id, db_pool)
        msg2 = await message.answer(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {current_tokens}")

        if current_tokens <= 0:
            await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.")
            return

        prompt = message.text if '–∏—Å—Ç–æ—Ä–∏—è' not in message.text.lower() else random.choice(history_phrases)
        msg = await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞..')

        role = await get_current_role(chat_id, db_pool)
        system_message = f"–¢—ã {role}" if role else "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫"
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ `client` –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —Å –Ω—É–∂–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ OpenAI
        response = await asyncio.get_event_loop().run_in_executor(None, lambda: client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ],
            max_tokens=700
        ))

        tokens_used = response.usage.total_tokens
        if current_tokens < tokens_used:
            await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.")
            return

        gpt_text = response.choices[0].message.content
        await bot.delete_message(chat_id, msg.message_id)
        await bot.delete_message(chat_id, msg2.message_id)
        await message.answer(gpt_text)
        await message.answer(f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens_used}")

        await update_user_tokens(chat_id, -tokens_used, db_pool)
        new_token_balance = current_tokens - tokens_used
        await message.answer(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {new_token_balance}")
    else:
        await message.reply("—Ä–µ–∂–∏–º GPT –æ—Ç–∫–ª—é—á–µ–Ω")


def start_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_chat_gpt = types.KeyboardButton("gpt_chatü§ñ")
    item1 = types.KeyboardButton("/start")
    item2 = types.KeyboardButton("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
    markup.add(item_chat_gpt, item1, item2)
    return markup


def gpt_menu():
    markup_gpt = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_chat_gpt = types.KeyboardButton("gpt_chatü§ñ")
    item1 = types.KeyboardButton("–∏—Å—Ç–æ—Ä–∏—è")
    item2 = types.KeyboardButton("—Å—Ç–æ–ø‚õî")
    item3 = types.KeyboardButton("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
    back_button = types.KeyboardButton(BACK_BUTTON)
    markup_gpt.add(item_chat_gpt, item1, item2, item3, back_button)
    return markup_gpt


def menu_settings():
    markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠")
    item2 = types.KeyboardButton("—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠")
    item3 = types.KeyboardButton("–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    back_button = types.KeyboardButton(BACK_BUTTON)
    markup_settings.add(item1, item2, item3, back_button)
    return markup_settings


async def on_shutdown(dispatcher):
    await db_pool.close()
    print('–ë–æ—Ç –≤—ã–∫–ª—é—á–µ–Ω –∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –∑–∞–∫—Ä—ã—Ç–æ.')

if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup, on_shutdown=on_shutdown)
