from aiogram import Bot, Dispatcher, types, executor
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
import os
import random
import openai
from cryptography.fernet import Fernet
from dotenv import load_dotenv
from data_manager import TOKEN
from db_utils222 import (
    user_exists,
    add_user_to_db,
    get_current_role,
    update_chat_role,
    get_db_connection,
    get_role_name,
    update_user_tokens,
    get_user_tokens,
    get_user_id_somehow,
)


BACK_BUTTON = "‚óÄ –Ω–∞–∑–∞–¥"
history_phrases = [
    "—Ä–∞—Å—Å–∫–∞–∂–∏ —Å–≤–æ—é –∏—Å—Ç–æ—Ä–∏—é",
    "—Ä–∞—Å—Å–∫–∞–∂–∏ –∑–∞–±–∞–≤–Ω—ã–π —Å–ª—É—á–∞–π —É —Ç–µ–±—è"
]

load_dotenv()

# –ß—Ç–µ–Ω–∏–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ API –∫–ª—é—á–∞ –∏–∑ .env
encrypted_api_key = os.getenv("ENCRYPTED_API_KEY")
WELCOME_MESSAGE = (
    "–ß—Ç–æ –±—ã –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É 'gpt_chatü§ñ'\n"
    "–ß—Ç–æ –±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '—Å—Ç–æ–ø‚õî'\n"
    "–ß—Ç–æ –±—ã –≤–æ–π—Ç–∏ –≤ –º–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gpt\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô'\n"
    "–±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–Ω–æ–ø–∫–∏-–∫–æ–º–∞–Ω–¥—ã\n"
    "–ß—Ç–æ –±—ã –≤—ã–±—Ä–∞—Ç—å —Ä–æ–ª—å –Ω–∞–∂–º–∏—Ç–µ '—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠'\n"
    "–ß—Ç–æ –±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ä–æ–ª—å –Ω–∞–∂–º–∏—Ç–µ '—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠'"
)

if not encrypted_api_key:
    raise Exception("–ó–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω—ã–π API –∫–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ.")

# –ß—Ç–µ–Ω–∏–µ –∫–ª—é—á–∞ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
with open("secret.key", "rb") as key_file:
    key = key_file.read()

# –†–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∞ API –∫–ª—é—á–∞
fernet = Fernet(key)
decrypted = fernet.decrypt(encrypted_api_key.encode())
api_key1 = decrypted.decode()

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)
dp.middleware.setup(LoggingMiddleware())
client = openai.OpenAI(api_key=api_key1)
active_chats = {}


def start_menu() -> types.ReplyKeyboardMarkup:
    markup = ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    markup.add(KeyboardButton('gpt_chatü§ñ'))
    markup.add(KeyboardButton('—Å—Ç–æ–ø‚õî'), KeyboardButton('–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô'))
    markup.add(KeyboardButton('—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠'), KeyboardButton('—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠'))
    return markup


@dp.message_handler(commands=['start'])
async def welcome(message: types.Message):
    with open('image/Hi.webp', 'rb') as hi:
        user = message.from_user
        if await user_exists(user.username):
            await message.answer_photo(hi)
            await message.answer("–†–∞–¥ —Å–Ω–æ–≤–∞ –≤–∞—Å –≤–∏–¥–µ—Ç—å!", reply_markup=start_menu())
            await message.answer(WELCOME_MESSAGE)
        else:
            await message.answer_photo(hi)
            await add_user_to_db(user.first_name, user.username, message.chat.id)
            await message.answer("–†–∞–¥ –≤–∏–¥–µ—Ç—å –Ω–æ–≤–æ–µ –ª–∏—Ü–æ!", reply_markup=start_menu())
            await message.answer(WELCOME_MESSAGE)
            print("–Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å", user.first_name, user.username, message.chat.id)


@dp.message_handler(commands=['gpt_chat'])
async def enable_gpt_chat(message: types.Message):
    chat_id = message.chat.id
    user_id = get_user_id_somehow(message.chat.id)
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    # –°–ª–µ–¥—É—é—â–∏–π –±–ª–æ–∫ –∫–æ–¥–∞ –∞–Ω–∞–ª–æ–≥–∏—á–µ–Ω –≤–∞—à–µ–π –ª–æ–≥–∏–∫–µ —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö

    async with get_db_connection() as conn:
        async with conn.cursor() as cursor:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Ç–∞–±–ª–∏—Ü–µ tokens –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
            await cursor.execute("SELECT id_user FROM tokens WHERE id_user = %s", (user_id,))
            if not await cursor.fetchone():
                await cursor.execute("INSERT INTO tokens (id_user, token) VALUES (%s, 10000)", (user_id,))
                await conn.commit()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –≤ chat_roles –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            await cursor.execute("SELECT id_chat FROM chat_roles WHERE id_chat = %s", (chat_id,))
            if not await cursor.fetchone():
                await cursor.execute("INSERT INTO chat_roles (id_chat, id_roles) VALUES (%s, %s)", (chat_id, 1))
                await conn.commit()

    # –ê–∫—Ç–∏–≤–∞—Ü–∏—è —á–∞—Ç–∞
    active_chats[chat_id] = True
    await message.answer("–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –≤–∫–ª—é—á–µ–Ω.")
    await message.answer("–ú–µ–Ω—é GPT:", reply_markup=gpt_menu())


@dp.message_handler(commands=['stop'])
async def disable_gpt_stop_chat(message: types.Message):
    active_chats.pop(message.chat.id, None)
    await message.answer("–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω.")
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_menu())


@dp.message_handler(commands=['settings'])
async def disable_gpt_settings_chat(message: types.Message):
    active_chats.pop(message.chat.id, None)
    await message.answer("–†–µ–∂–∏–º GPT —á–∞—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
    await message.answer("–ú–µ–Ω—é –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ gpt:", reply_markup=menu_settings())


@dp.message_handler(commands=['gpt_roles'])
async def list_roles(message: types.Message):
    async with get_db_connection() as conn:
        async with conn.cursor() as cursor:
            await cursor.execute("SELECT id_roles, name_roles FROM roles")
            roles = await cursor.fetchall()

    markup_roles = InlineKeyboardMarkup()
    for role in roles:
        button = InlineKeyboardButton(role[1], callback_data=f"setrole_{role[0]}")
        markup_roles.add(button)

    await message.answer("–í–æ—Ç —Ç–µ–∫—É—â–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏:", reply_markup=markup_roles)


@dp.message_handler(commands=['current_role'])
async def current_role(message: types.Message):
    chat_id = message.chat.id
    async with get_db_connection() as conn:
        async with conn.cursor() as cursor:
            try:
                await cursor.execute(
                    "SELECT r.name_roles FROM chat_roles cr "
                    "JOIN roles r ON cr.id_roles = r.id_roles "
                    "WHERE cr.id_chat = %s", (chat_id,))
                role = await cursor.fetchone()

                if role:
                    await message.answer(f"–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: {role[0]}")
                else:
                    await message.answer("–†–æ–ª—å –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —á–∞—Ç–∞ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")
            except Exception as e:
                print(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


@dp.callback_query_handler(lambda call: call.data.startswith('setrole_'))
async def callback_inline(call: types.CallbackQuery):
    role_id = int(call.data.split('_')[1])
    chat_id = call.message.chat.id

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–æ–ª–∏ –≤ –ë–î
    await update_chat_role(chat_id, role_id)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ä–æ–ª–∏
    role_name = await get_role_name(role_id)

    await call.answer(f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{role_name}'.", show_alert=True)
    # –£–¥–∞–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await call.message.delete()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await call.message.answer(f"–†–æ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–º–µ–Ω–µ–Ω–∞ –Ω–∞ '{role_name}'.")


@dp.message_handler(commands=['clear_the_history'])
async def clear_the_history(message: types.Message):
    chat_id = message.chat.id
    user_id = await get_user_id_somehow(chat_id)
    if user_id is None:
        await bot.send_message(chat_id, "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    conn = await get_db_connection()
    async with conn.transaction():
        await conn.execute("UPDATE tokens SET token = 10000 WHERE id_user = $1", user_id)

    await conn.close()

    await bot.send_message(chat_id, "–ò—Å—Ç–æ—Ä–∏—è —Ç–æ–∫–µ–Ω–æ–≤ —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: 10000.")


@dp.message_handler()
async def gpt(message: types.Message):
    chat_id = message.chat.id
    # –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã, —Ä–∞–±–æ—Ç–∞—é—â–∏–µ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ä–µ–∂–∏–º–∞ GPT
    if 'gpt_chatü§ñ' in message.text.lower():
        await enable_gpt_chat(message)
    elif '—Å—Ç–æ–ø‚õî' in message.text.lower():
        await disable_gpt_stop_chat(message)
    elif '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô' in message.text.lower():
        await disable_gpt_settings_chat(message)
    elif '—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠' in message.text.lower():
        await list_roles(message)
    elif '—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠' in message.text.lower():
        await current_role(message)
    elif '–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é' in message.text.lower():
        await clear_the_history(message)
    elif BACK_BUTTON in message.text.lower():
        await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=start_menu())
    elif chat_id in active_chats:
        current_tokens = await get_user_tokens(chat_id)
        await message.answer(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {current_tokens}")

        if current_tokens <= 0:
            await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.")
            return

        prompt = message.text if '–∏—Å—Ç–æ—Ä–∏—è' not in message.text.lower() else random.choice(history_phrases)
        await message.answer('–°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ. –ñ–¥–µ–º –æ—Ç–≤–µ—Ç–∞..')

        role = await get_current_role(chat_id)
        system_message = f"–¢—ã {role}" if role else "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫"
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": system_message},
                {"role": "user", "content": prompt}
            ]
        )

        tokens_used = response.usage.total_tokens
        if current_tokens < tokens_used:
            await message.answer("–£ –≤–∞—Å –Ω–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ç–æ–∫–µ–Ω–æ–≤.")
            return

        gpt_text = response.choices[0].message.content
        await message.answer(gpt_text)
        await message.answer(f"–ü–æ—Ç—Ä–∞—á–µ–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {tokens_used}")

        await update_user_tokens(chat_id, tokens_used)
        new_token_balance = current_tokens - tokens_used
        await message.answer(f"–¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤: {new_token_balance}")
    else:
        await message.reply("—Ä–µ–∂–∏–º GPT –æ—Ç–∫–ª—é—á–µ–Ω")


def start_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_chat_gpt = types.KeyboardButton("gpt_chatü§ñ")
    item1 = types.KeyboardButton("/start")
    item2 = types.KeyboardButton("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
    markup.add(item_chat_gpt, item1, item2)
    return markup


def gpt_menu():
    markup_gpt = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item_chat_gpt = types.KeyboardButton("gpt_chatü§ñ")
    item1 = types.KeyboardButton("–∏—Å—Ç–æ—Ä–∏—è")
    item2 = types.KeyboardButton("—Å—Ç–æ–ø‚õî")
    item3 = types.KeyboardButton("–Ω–∞—Å—Ç—Ä–æ–π–∫–∏‚öô")
    back_button = types.KeyboardButton(BACK_BUTTON)
    markup_gpt.add(item_chat_gpt, item1, item2, item3, back_button)
    return markup_gpt


def menu_settings():
    markup_settings = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item1 = types.KeyboardButton("—Ç–µ–∫—É—â–∞—è —Ä–æ–ª—åüé≠")
    item2 = types.KeyboardButton("—Å–º–µ–Ω–∏—Ç—å —Ä–æ–ª—åüé≠")
    item3 = types.KeyboardButton("–æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")
    back_button = types.KeyboardButton(BACK_BUTTON)
    markup_settings.add(item1, item2, item3, back_button)
    return markup_settings


if __name__ == '__main__':
    print('–∑–∞–ø—É—â–µ–Ω')
    executor.start_polling(dp)
    print('–≤—ã–∫–ª—é—á–µ–Ω')